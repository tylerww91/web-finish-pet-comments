-- Table: public.comments

DROP TABLE IF EXISTS public.comments;

CREATE TABLE IF NOT EXISTS public.comments
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    text text COLLATE pg_catalog."default" NOT NULL,
    pet_id bigint NOT NULL,
    user_id uuid NOT NULL DEFAULT auth.uid(),
    CONSTRAINT comments_pkey PRIMARY KEY (id),
    CONSTRAINT comments_pet_id_fkey FOREIGN KEY (pet_id)
        REFERENCES public.pets (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.comments
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.comments TO anon;

GRANT ALL ON TABLE public.comments TO authenticated;

GRANT ALL ON TABLE public.comments TO postgres;

GRANT ALL ON TABLE public.comments TO service_role;

GRANT ALL ON TABLE public.comments TO supabase_admin;
-- POLICY: Enable insert for authenticated users on user_id

DROP POLICY IF EXISTS "Enable insert for authenticated users on user_id" ON public.comments;

CREATE POLICY "Enable insert for authenticated users on user_id"
    ON public.comments
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK ((auth.uid() = user_id));
-- POLICY: Enable select for authenticated users

DROP POLICY IF EXISTS "Enable select for authenticated users" ON public.comments;

CREATE POLICY "Enable select for authenticated users"
    ON public.comments
    AS PERMISSIVE
    FOR SELECT
    TO authenticated
    USING (true);